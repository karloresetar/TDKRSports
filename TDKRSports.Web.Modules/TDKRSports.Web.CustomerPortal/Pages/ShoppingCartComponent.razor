@page "/cart"

@inject IViewShoppingCartUseCase viewShoppingCartUseCase

<h3>Shopping Cart</h3>
<br />

@if (order != null && order.LineItems != null && order.LineItems.Count > 0) // ako je empty ne radi nista
{
    <div class="row">
        <div class="col-6">
            <ul>
                @for (int i=0; i < order.LineItems.Count; i++)
                {
                    //line items
                    <LineItemComponent 
                                        LineItem="order.LineItems[i]"
                                        OnDeleteProduct="HandleDeleteProduct"
                                        OnUpdateQuantity="HandleUpdateQuantity"></LineItemComponent>

                    @if(i < order.LineItems.Count - 1)
                    {
                        <li style="list-style:none">
                            <hr />
                        </li>
                    }
                }
            </ul>
        </div>
        <div class="col">
            @*order summary*@
            <OrderSummaryComponent Order="order"></OrderSummaryComponent>
        </div>
    </div>
}



@code {
    private Order order;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            order = await viewShoppingCartUseCase.Execute();
            StateHasChanged(); // za refreshanje nakon renderanja
        }
    }

    private void HandleDeleteProduct(Order order)
    {
        this.order = order; // ovde za razliku od prije ne stavljamo statehaschanged jer je event callback

    }

    private void HandleUpdateQuantity(Order order)
    {
        this.order = order;
    }

}
